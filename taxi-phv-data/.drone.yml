  #################################################### Nightly Steps ############################################################
kind: pipeline
type: docker
name: ntr-api-nightly
trigger:
  event:
    - cron
concurrency:
  limit: 1
volumes:
- name: docker_sock
  host:
    path: /var/run/docker.sock

services:
  - name: zap
    image: owasp/zap2docker-stable
    commands:
      - zap.sh -daemon -host 0.0.0.0 -port 8080 -config api.addrs.addr.name=.* -config api.addrs.addr.regex=true -config api.disablekey=true
    ports:
      - 8080

steps:

  # Build Docker Image for Running Maven
  - name: build docker maven base
    image: docker
    commands:
      - docker build -t national-taxi-register-api-base -f ci-cd-resources/Dockerfile.ci.base .
    volumes:
      - name: docker_sock
        path: /var/run/docker.sock

  - name: owasp dependency scan
    image: national-taxi-register-api-base
    pull: never
    commands:
      - mvn org.owasp:dependency-check-maven:check -P security
    environment:
      JAQU_NEXUS_URL:
        from_secret: nexus_url
      JAQU_NEXUS_USER:
        from_secret: nexus_username
      JAQU_NEXUS_PASSWORD:
        from_secret: nexus_password

  - name: build testing tools image
    image: docker:git
    volumes:
      - name: docker_sock
        path: /var/run/docker.sock
    commands:
      - mkdir ~/.ssh
      - echo -n "$GIT_PRIVATE_SSH" > ~/.ssh/id_rsa
      - chmod 600 ~/.ssh/id_rsa
      - touch ~/.ssh/known_hosts
      - chmod 600 ~/.ssh/known_hosts
      - ssh-keyscan -H github.com > /etc/ssh/ssh_known_hosts 2> /dev/null
      - git clone git@github.com:InformedSolutions/JAQU-CAZ-QA-selenium.git
      - cd JAQU-CAZ-QA-selenium
      - docker build -t test-tools-image .
    environment:
      GIT_PRIVATE_SSH:
        from_secret: github_private_key

  - name: run owasp zap tests
    image: test-tools-image
    pull: never
    failure: ignore
    environment:
      ZAP: true
      ZAP_PROXY_URL: 'zap'
      BASEURL_NTR: 'https://dev-upload.taxiphvdata.co.uk'
      VALID_USERNAME: 'tester@informed.com'
      VALID_PASSWORD: 'Tester123..'
      SCREENSHOT_TYPE: 'base'
      LOCATION: local
      BASEURL_NTR_API : 'https://dev-api.taxiphvdata.co.uk'
      BASEURL_NTR_OAUTH: 'https://ntr-userpool-dev.auth.eu-west-2.amazoncognito.com'
      CLIENT_ID: 
        from_secret: aws_id_e_to_e
      CLIENT_SECRET: 
        from_secret: aws_secret_e_to_e
      COGNITO_ID: 
        from_secret: cognito_sub_id_e_to_e
    commands:
      - echo "Checking BASEURL_NTR_API value:"
      - echo $BASEURL_NTR_API
      - cd JAQU-CAZ-QA-selenium
      - cucumber -t @NTRAPI

  - name: security warning
    image: docker:git
    commands:
      - echo "OWASP ZAP tests failed. Please check outputs in case of false positives."
    when:
      status:
        - failure


  ################################################# End Nightly Steps ############################################################

---







  ################################################### DEV Steps ########################################################

kind: pipeline
type: docker
name: ntr-api-dev

trigger:
  branch:
    - develop
  event:
    - pull_request
    - push
concurrency:
  limit: 1

volumes:
  - name: docker_sock
    host:
      path: /var/run/docker.sock

  - name: package_directory
    temp: {}

  - name: m2_repo
    temp: {}

services:
  - name: redis
    image: redis
    ports:
      - 6379
  - name: postgres
    image: postgres:11-alpine
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: caz-national-taxi-phv
    ports:
      - 5432
  - name: localstack
    image: localstack/localstack:0.10.2
    environment:
      SERVICES: s3,sqs
    ports:
      - 4572
      - 4576


steps:

  # Clean agent images and containers to prevent disk space overuse
  - name: clean agent
    image: docker
    commands:
      - docker system prune -f
    volumes:
      - name: docker_sock
        path: /var/run/docker.sock

  # Build Docker Image for Running Maven
  - name: build docker maven base
    image: docker
    commands:
      - docker build -t national-taxi-register-api-base -f ci-cd-resources/Dockerfile.ci.base .
    volumes:
      - name: docker_sock
        path: /var/run/docker.sock

  # Unit test
  - name: unit test
    image: national-taxi-register-api-base
    volumes:
      - name: package_directory
        path: /drone/src/target
      - name: m2_repo
        path: /root/.m2
    pull: never
    commands:
      - mvn test -P jacoco --no-transfer-progress
    environment:
      JAQU_NEXUS_URL:
        from_secret: nexus_url
      JAQU_NEXUS_USER:
        from_secret: nexus_username
      JAQU_NEXUS_PASSWORD:
        from_secret: nexus_password

  # IT test
  - name: IT test
    image: national-taxi-register-api-base
    volumes:
      - name: package_directory
        path: /drone/src/target
      - name: m2_repo
        path: /root/.m2
    pull: never
    environment:
      JAQU_NEXUS_URL:
        from_secret: nexus_url
      JAQU_NEXUS_USER:
        from_secret: nexus_username
      JAQU_NEXUS_PASSWORD:
        from_secret: nexus_password
      BUILD_ID: ${DRONE_BUILD_NUMBER}
      POSTGRES_URL: postgres:5432
      AWS_S3_URL: localstack:4572
      AWS_SQS_URL: localstack:4576
      JOB_CLEAN_UP_REQUEST_QUEUE_URL: http://localstack:4576/queue/job-clean-up-request
      REDIS_URL: redis
      REDIS_CUSTOM_PORT: 6379
    commands:
      - mvn verify -DskipUnitTests -P jacoco --no-transfer-progress

  # Scan with sonar
  - name: sonar scan
    image: national-taxi-register-api-base
    volumes:
      - name: package_directory
        path: /drone/src/target
      - name: m2_repo
        path: /root/.m2
    environment:
      JAQU_NEXUS_URL:
        from_secret: nexus_url
      JAQU_NEXUS_USER:
        from_secret: nexus_username
      JAQU_NEXUS_PASSWORD:
        from_secret: nexus_password
      SONAR_HOST:
        from_secret: sonar_host
      SONAR_TOKEN:
        from_secret: sonar_token
    pull: never
    commands:
      - mvn sonar:sonar -Dsonar.host.url=$SONAR_HOST
        -Dsonar.projectKey=${DRONE_REPO}
        -Dsonar.projectName=${DRONE_REPO}
        -Dsonar.login=$SONAR_TOKEN
        -Dsonar.coverage.jacoco.xmlReportPaths=/drone/src/target/site/jacoco-aggregate/jacoco.xml
        -Dsonar.tests=src/test/java,src/it/java --no-transfer-progress
  
  # Package
  - name: package deployable zip
    image: national-taxi-register-api-base
    volumes:
      - name: package_directory
        path: /drone/src/target
      - name: m2_repo
        path: /root/.m2
    environment:
      JAQU_NEXUS_URL:
        from_secret: nexus_url
      JAQU_NEXUS_USER:
        from_secret: nexus_username
      JAQU_NEXUS_PASSWORD:
        from_secret: nexus_password
      BUILD_ID: ${DRONE_BUILD_NUMBER}
    pull: never
    commands:
      - mvn package -DskipUnitTests --no-transfer-progress
    when:
      event:
        - push

  # Invoke terraform scripts to deploy lambda function
  - name: deploy to dev
    image: hashicorp/terraform:0.12.3
    volumes:
      - name: package_directory
        path: /opt/package
    commands:
      - apk update && apk add bash
      - mkdir ~/.ssh
      - echo -n "$GIT_PRIVATE_SSH" > ~/.ssh/id_rsa
      - chmod 600 ~/.ssh/id_rsa
      - touch ~/.ssh/known_hosts
      - chmod 600 ~/.ssh/known_hosts
      - ssh-keyscan -H github.com > /etc/ssh/ssh_known_hosts 2> /dev/null
      - git clone git@github.com:InformedSolutions/JAQU-CAZ-IAC.git
      - cd JAQU-CAZ-IAC
      - export TF_VAR_lambda_file=$(ls /opt/package/*.zip | tail -1)
      - cd terraform/projects/ntr/layers/00.global
      - PATH=$PATH:../../../../bin/
      - chmod +x ../../../../bin/tf
      - tf init
      - tf workspace select default
      - tf apply -auto-approve
      - cd ../01.networking
      - tf init
      - tf workspace select dev || tf workspace new dev
      - tf apply -auto-approve
      - cd ../02.backends
      - tf init
      - tf workspace select dev || tf workspace new dev
      - tf apply -auto-approve
      - cd ../03.api
      - tf init
      - tf workspace select dev || tf workspace new dev
      - tf apply -auto-approve
    environment:
      TF_VAR_access_key:
        from_secret: aws_access_key_id
      TF_VAR_secret_key:
        from_secret: aws_secret_access_key
      TF_VAR_account_id:
        from_secret: aws_account_id
      GIT_PRIVATE_SSH:
        from_secret: github_private_key
    when:
      event:
        - push
        
        
  - name: codedeploy api dev
    image: alpine:latest
    commands:
      - apk add --update bash python python-dev py-pip build-base jq
      - pip install awscli
      - aws s3 cp s3://$LAMBDA_BUCKET/$PROJECT/$DEPLOY_ENVIRONMENT/CodeDeploy/deploy_jaqu_caz.sh .
      - aws s3 cp s3://$LAMBDA_BUCKET/$PROJECT/$DEPLOY_ENVIRONMENT/CodeDeploy/deploy_register_csv.sh .
      - aws s3 cp s3://$LAMBDA_BUCKET/$PROJECT/$DEPLOY_ENVIRONMENT/CodeDeploy/deploy_exception_handler.sh .
      - aws s3 cp s3://$LAMBDA_BUCKET/$PROJECT/$DEPLOY_ENVIRONMENT/CodeDeploy/deploy_audit_handler.sh .
      - bash deploy_jaqu_caz.sh
      - bash deploy_register_csv.sh
      - bash deploy_exception_handler.sh
      - bash deploy_audit_handler.sh
    environment:
      AWS_ACCESS_KEY_ID:
        from_secret: aws_access_key_id
      AWS_SECRET_ACCESS_KEY:
        from_secret: aws_secret_access_key
      AWS_DEFAULT_REGION: eu-west-2
      PROJECT: ntr
      DEPLOY_ENVIRONMENT: dev
      LAMBDA_BUCKET: jaqu-projects-lambda-bucket
    when:
      event:
        - push
  # subscribe to operational monitoring alert in api dev
  - name: subscribe to operational monitoring alert in api dev
    image: alpine:latest
    commands:
      - apk add --update bash python python-dev py-pip build-base
      - pip install awscli
      - python ./ci-cd-resources/subscribe_to_alert_topics.py --include $PROJECT,$DEPLOY_ENVIRONMENT --exclude dead,letter
    environment:
      AWS_ACCESS_KEY_ID:
        from_secret: aws_access_key_id
      AWS_SECRET_ACCESS_KEY:
        from_secret: aws_secret_access_key
      AWS_DEFAULT_REGION: eu-west-2
      PROJECT: ntr
      DEPLOY_ENVIRONMENT: dev
    when:
      event:
        - push

    # Build end to end tests docker image
  - name: build end to end test image
    image: docker:git
    commands:
      - mkdir ~/.ssh
      - echo -n "$GIT_PRIVATE_SSH" > ~/.ssh/id_rsa
      - chmod 600 ~/.ssh/id_rsa
      - touch ~/.ssh/known_hosts
      - chmod 600 ~/.ssh/known_hosts
      - ssh-keyscan -H github.com > /etc/ssh/ssh_known_hosts 2> /dev/null
      - git clone git@github.com:InformedSolutions/JAQU-CAZ-QA-selenium.git
      - cd JAQU-CAZ-QA-selenium
      - docker build -t selenium-jaqu .
    environment:
      GIT_PRIVATE_SSH:
        from_secret: github_private_key
    volumes:
      - name: docker_sock
        path: /var/run/docker.sock
    when:
      event:
        - push

    # Run end to end tests
  - name: run api end to end tests
    image: selenium-jaqu
    pull: never
    environment:
      BASEURL_NTR_API : 'https://dev-api.taxiphvdata.co.uk'
      BASEURL_NTR_OAUTH: 'https://ntr-userpool-dev.auth.eu-west-2.amazoncognito.com'
      CLIENT_ID: 
        from_secret: aws_id_e_to_e
      CLIENT_SECRET: 
        from_secret: aws_secret_e_to_e
      COGNITO_ID: 
        from_secret: cognito_sub_id_e_to_e
    commands:
      - sleep 5m
      - cd JAQU-CAZ-QA-selenium
      - cucumber -t @NTRAPI --retry 2
    when:
      event:
        - push

      # Execute jMeter scripts via taurus
  - name: micro-performance tests
    image: blazemeter/taurus
    environment:
      CLIENT_ID: 
        from_secret: aws_id_e_to_e
      CLIENT_SECRET: 
        from_secret: aws_secret_e_to_e
      COGNITO_ID: 
        from_secret: cognito_sub_id_e_to_e
    commands:
      - ruby jmeter/generate_api_json.rb
      - mv taxi-10000-api-json.txt jmeter
      - bzt -o modules.jmeter.properties.COGNITO_ID=$COGNITO_ID -o modules.jmeter.properties.CLIENT_SECRET=$CLIENT_SECRET -o modules.jmeter.properties.CLIENT_ID=$CLIENT_ID -o modules.jmeter.properties.hostname=dev-api.taxiphvdata.co.uk -o modules.jmeter.properties.oauthhostname=ntr-userpool-dev.auth.eu-west-2.amazoncognito.com jmeter/ntr_valid_upload_api.jmx jmeter/assertion.yml
    volumes:
      - name: docker_sock
        path: /var/run/docker.sock
    when:
      event:
        - push
  ################################################# End DEV Only #######################################################

---
























  #################################################### SIT Steps ############################################################

kind: pipeline
type: docker
name: ntr-api-sit

trigger:
  branch:
    - release/*
  event:
    - pull_request
    - push
concurrency:
  limit: 1

volumes:
  - name: docker_sock
    host:
      path: /var/run/docker.sock

  - name: package_directory
    temp: {}

  - name: m2_repo
    temp: {}

services:
  - name: redis
    image: redis
    ports:
      - 6379
  - name: postgres
    image: postgres:11-alpine
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: caz-national-taxi-phv
    ports:
      - 5432
  - name: localstack
    image: localstack/localstack:0.10.2
    environment:
      SERVICES: s3, sqs
    ports:
      - 4572
      - 4576


steps:

  # Clean agent images and containers to prevent disk space overuse
  - name: clean agent
    image: docker
    commands:
      - docker system prune -f
    volumes:
      - name: docker_sock
        path: /var/run/docker.sock

  # Build Docker Image for Running Maven
  - name: build docker maven base
    image: docker
    commands:
      - docker build -t national-taxi-register-api-base -f ci-cd-resources/Dockerfile.ci.base .
    volumes:
      - name: docker_sock
        path: /var/run/docker.sock

  # Unit test
  - name: unit test
    image: national-taxi-register-api-base
    volumes:
      - name: package_directory
        path: /drone/src/target
      - name: m2_repo
        path: /root/.m2
    pull: never
    commands:
      - mvn test -P jacoco --no-transfer-progress
    environment:
      JAQU_NEXUS_URL:
        from_secret: nexus_url
      JAQU_NEXUS_USER:
        from_secret: nexus_username
      JAQU_NEXUS_PASSWORD:
        from_secret: nexus_password

  # IT test
  - name: IT test
    image: national-taxi-register-api-base
    volumes:
      - name: package_directory
        path: /drone/src/target
      - name: m2_repo
        path: /root/.m2
    pull: never
    environment:
      JAQU_NEXUS_URL:
        from_secret: nexus_url
      JAQU_NEXUS_USER:
        from_secret: nexus_username
      JAQU_NEXUS_PASSWORD:
        from_secret: nexus_password
      BUILD_ID: ${DRONE_BUILD_NUMBER}
      POSTGRES_URL: postgres:5432
      AWS_S3_URL: localstack:4572
      AWS_SQS_URL: localstack:4576
      JOB_CLEAN_UP_REQUEST_QUEUE_URL: http://localstack:4576/queue/job-clean-up-request
      REDIS_URL: redis
      REDIS_CUSTOM_PORT: 6379
    commands:
      - mvn verify -DskipUnitTests -P jacoco --no-transfer-progress

  # Package
  - name: package deployable zip
    image: national-taxi-register-api-base
    volumes:
      - name: package_directory
        path: /drone/src/target
      - name: m2_repo
        path: /root/.m2
    environment:
      JAQU_NEXUS_URL:
        from_secret: nexus_url
      JAQU_NEXUS_USER:
        from_secret: nexus_username
      JAQU_NEXUS_PASSWORD:
        from_secret: nexus_password
      BUILD_ID: ${DRONE_BUILD_NUMBER}
    pull: never
    commands:
      - mvn package -DskipUnitTests --no-transfer-progress
    when:
      event:
        - push

  # Invoke terraform scripts to deploy lambda function in SIT
  - name: plan terraform updates in sit
    image: hashicorp/terraform:0.12.3
    volumes:
      - name: package_directory
        path: /opt/package
    commands:
      - apk update && apk add bash
      - mkdir ~/.ssh
      - echo -n "$GIT_PRIVATE_SSH" > ~/.ssh/id_rsa
      - chmod 600 ~/.ssh/id_rsa
      - touch ~/.ssh/known_hosts
      - chmod 600 ~/.ssh/known_hosts
      - ssh-keyscan -H github.com > /etc/ssh/ssh_known_hosts 2> /dev/null
      - git clone git@github.com:InformedSolutions/JAQU-CAZ-IAC.git
      - cd JAQU-CAZ-IAC
      - export TF_VAR_lambda_file=$(ls /opt/package/*.zip | tail -1)
      - cd terraform/projects/ntr/layers/00.global
      - PATH=$PATH:../../../../bin/
      - chmod +x ../../../../bin/tf
      - tf init
      - tf workspace select default
      - tf plan
      - cd ../01.networking
      - tf init
      - tf workspace select sit || tf workspace new sit
      - tf plan
      - cd ../02.backends
      - tf init
      - tf workspace select sit || tf workspace new sit
      - tf plan
      - cd ../03.api
      - tf init
      - tf workspace select sit || tf workspace new sit
      - tf plan
    environment:
      TF_VAR_access_key:
        from_secret: aws_access_key_id
      TF_VAR_secret_key:
        from_secret: aws_secret_access_key
      TF_VAR_account_id:
        from_secret: aws_account_id
      GIT_PRIVATE_SSH:
        from_secret: github_private_key
    when:
      event:
        - pull_request

  - name: provisioning warning
    image: docker:git
    commands:
      - echo "Pipeline failed. If a deployment is being made for the first time into an environment terraform backends will not yet exist which means this is to be expected. If not terraform related, please see logs for further details"
    when:
      status:
        - failure

  # Invoke terraform scripts to deploy lambda function in SIT
  - name: deploy to sit
    image: hashicorp/terraform:0.12.3
    volumes:
      - name: package_directory
        path: /opt/package
    commands:
      - apk update && apk add bash
      - mkdir ~/.ssh
      - echo -n "$GIT_PRIVATE_SSH" > ~/.ssh/id_rsa
      - chmod 600 ~/.ssh/id_rsa
      - touch ~/.ssh/known_hosts
      - chmod 600 ~/.ssh/known_hosts
      - ssh-keyscan -H github.com > /etc/ssh/ssh_known_hosts 2> /dev/null
      - git clone git@github.com:InformedSolutions/JAQU-CAZ-IAC.git
      - cd JAQU-CAZ-IAC
      - export TF_VAR_lambda_file=$(ls /opt/package/*.zip | tail -1)
      - cd terraform/projects/ntr/layers/00.global
      - PATH=$PATH:../../../../bin/
      - chmod +x ../../../../bin/tf
      - tf init
      - tf workspace select default
      - tf apply -auto-approve
      - cd ../01.networking
      - tf init
      - tf workspace select sit || tf workspace new sit
      - tf apply -auto-approve
      - cd ../02.backends
      - tf init
      - tf workspace select sit || tf workspace new sit
      - tf apply -auto-approve
      - cd ../03.api
      - tf init
      - tf workspace select sit || tf workspace new sit
      - tf apply -auto-approve
    environment:
      TF_VAR_access_key:
        from_secret: aws_access_key_id
      TF_VAR_secret_key:
        from_secret: aws_secret_access_key
      TF_VAR_account_id:
        from_secret: aws_account_id
      GIT_PRIVATE_SSH:
        from_secret: github_private_key
    when:
      event:
        - push
          

  - name: codedeploy api sit
    image: golang:alpine
    commands:
      - apk add --update bash python python-dev py-pip build-base jq
      - pip install awscli
      - aws s3 cp s3://$LAMBDA_BUCKET/$PROJECT/$DEPLOY_ENVIRONMENT/CodeDeploy/deploy_jaqu_caz.sh .
      - aws s3 cp s3://$LAMBDA_BUCKET/$PROJECT/$DEPLOY_ENVIRONMENT/CodeDeploy/deploy_register_csv.sh .
      - aws s3 cp s3://$LAMBDA_BUCKET/$PROJECT/$DEPLOY_ENVIRONMENT/CodeDeploy/deploy_exception_handler.sh .
      - aws s3 cp s3://$LAMBDA_BUCKET/$PROJECT/$DEPLOY_ENVIRONMENT/CodeDeploy/deploy_audit_handler.sh .
      - bash deploy_jaqu_caz.sh
      - bash deploy_register_csv.sh
      - bash deploy_exception_handler.sh
      - bash deploy_audit_handler.sh
    environment:
      AWS_ACCESS_KEY_ID:
        from_secret: aws_access_key_id
      AWS_SECRET_ACCESS_KEY:
        from_secret: aws_secret_access_key
      AWS_DEFAULT_REGION: eu-west-2
      PROJECT: ntr
      DEPLOY_ENVIRONMENT: sit
      LAMBDA_BUCKET: jaqu-projects-lambda-bucket
    when:
      event:
        - push

  # subscribe to operational monitoring alert in api sit
  - name: subscribe to operational monitoring alert in api sit
    image: alpine:latest
    commands:
      - apk add --update bash python python-dev py-pip build-base
      - pip install awscli
      - python ./ci-cd-resources/subscribe_to_alert_topics.py --include $PROJECT,$DEPLOY_ENVIRONMENT --exclude dead,letter
    environment:
      AWS_ACCESS_KEY_ID:
        from_secret: aws_access_key_id
      AWS_SECRET_ACCESS_KEY:
        from_secret: aws_secret_access_key
      AWS_DEFAULT_REGION: eu-west-2
      PROJECT: ntr
      DEPLOY_ENVIRONMENT: sit
    when:
      event:
        - push

  ################################################# End SIT Steps ############################################################

---













  ############################################## Pre-prod Steps ######################################################

kind: pipeline
type: docker
name: ntr-api-preprod

trigger:
  branch:
    - staging
  event:
    - pull_request
    - push
concurrency:
  limit: 1

volumes:
  - name: package_directory
    temp: {}

steps:

  # Invoke terraform scripts to deploy lambda function in Pre-prod
  - name: plan terraform updates in preprod
    image: hashicorp/terraform:0.12.3
    volumes:
      - name: package_directory
        path: /opt/package
    commands:
      - apk add --update bash python python-dev py-pip build-base jq wget
      - pip install awscli
      - mkdir ~/.ssh
      - echo -n "$GIT_PRIVATE_SSH" > ~/.ssh/id_rsa
      - chmod 600 ~/.ssh/id_rsa
      - touch ~/.ssh/known_hosts
      - chmod 600 ~/.ssh/known_hosts
      - ssh-keyscan -H github.com > /etc/ssh/ssh_known_hosts 2> /dev/null
      - LAMBDA_FUNCTION=ntr-csv-from-s3-lambda-sit
      - ENV=sit
      - SIGNED_URL=`aws lambda get-function --function-name $LAMBDA_FUNCTION --qualifier $ENV| jq --raw-output '.Code.Location'`
      - VERSION=`aws lambda get-function --function-name $LAMBDA_FUNCTION --qualifier $ENV| jq --raw-output '.Configuration.Version'`
      - wget -O /opt/package/$LAMBDA_FUNCTION-$VERSION.zip $SIGNED_URL
      - export TF_VAR_lambda_file=/opt/package/$LAMBDA_FUNCTION-$VERSION.zip
      - git clone git@github.com:InformedSolutions/JAQU-CAZ-IAC.git
      - cd JAQU-CAZ-IAC
      - git checkout release/vccs-preprod
      - cd terraform/projects/ntr/layers/00.global
      - PATH=$PATH:../../../../bin/
      - chmod +x ../../../../bin/tf
      - tf init
      - tf workspace select default
      - tf plan
      - cd ../01.networking
      - tf init
      - tf workspace select preprod || tf workspace new preprod
      - tf plan
      - cd ../02.backends
      - tf init
      - tf workspace select preprod || tf workspace new preprod
      - tf plan
      - cd ../03.api
      - tf init
      - tf workspace select preprod || tf workspace new preprod
      - tf plan
    environment:
      TF_VAR_access_key:
        from_secret: aws_access_key_id
      TF_VAR_secret_key:
        from_secret: aws_secret_access_key
      TF_VAR_account_id:
        from_secret: aws_account_id
      GIT_PRIVATE_SSH:
        from_secret: github_private_key
      AWS_ACCESS_KEY_ID:
        from_secret: aws_access_key_id
      AWS_SECRET_ACCESS_KEY:
        from_secret: aws_secret_access_key
      AWS_DEFAULT_REGION: eu-west-2
    when:
      event:
        - pull_request

  - name: provisioning warning
    image: docker:git
    commands:
      - echo "Pipeline failed. If a deployment is being made for the first time into an environment terraform backends will not yet exist which means this is to be expected. If not terraform related, please see logs for further details"
    when:
      status:
        - failure

  # Invoke terraform scripts to deploy lambda function in Pre-prod
  - name: deploy to pre-prod
    image: hashicorp/terraform:0.12.3
    volumes:
      - name: package_directory
        path: /opt/package
    commands:
      - apk add --update bash python python-dev py-pip build-base jq wget
      - pip install awscli
      - mkdir ~/.ssh
      - echo -n "$GIT_PRIVATE_SSH" > ~/.ssh/id_rsa
      - chmod 600 ~/.ssh/id_rsa
      - touch ~/.ssh/known_hosts
      - chmod 600 ~/.ssh/known_hosts
      - ssh-keyscan -H github.com > /etc/ssh/ssh_known_hosts 2> /dev/null
      - LAMBDA_FUNCTION=ntr-csv-from-s3-lambda-sit
      - ENV=sit
      - SIGNED_URL=`aws lambda get-function --function-name $LAMBDA_FUNCTION --qualifier $ENV| jq --raw-output '.Code.Location'`
      - VERSION=`aws lambda get-function --function-name $LAMBDA_FUNCTION --qualifier $ENV| jq --raw-output '.Configuration.Version'`
      - wget -O /opt/package/$LAMBDA_FUNCTION-$VERSION.zip $SIGNED_URL
      - export TF_VAR_lambda_file=/opt/package/$LAMBDA_FUNCTION-$VERSION.zip
      - git clone git@github.com:InformedSolutions/JAQU-CAZ-IAC.git
      - cd JAQU-CAZ-IAC
      - git checkout release/vccs-preprod
      - cd terraform/projects/ntr/layers/00.global
      - PATH=$PATH:../../../../bin/
      - chmod +x ../../../../bin/tf
      - tf init
      - tf workspace select default
      - tf apply -auto-approve
      - cd ../01.networking
      - tf init
      - tf workspace select preprod || tf workspace new preprod
      - tf apply -auto-approve
      - cd ../02.backends
      - tf init
      - tf workspace select preprod || tf workspace new preprod
      - tf apply -auto-approve
      - cd ../03.api
      - tf init
      - tf workspace select preprod || tf workspace new preprod
      - tf apply -auto-approve
    environment:
      TF_VAR_access_key:
        from_secret: aws_access_key_id
      TF_VAR_secret_key:
        from_secret: aws_secret_access_key
      TF_VAR_account_id:
        from_secret: aws_account_id
      GIT_PRIVATE_SSH:
        from_secret: github_private_key
      AWS_ACCESS_KEY_ID:
        from_secret: aws_access_key_id
      AWS_SECRET_ACCESS_KEY:
        from_secret: aws_secret_access_key
      AWS_DEFAULT_REGION: eu-west-2
    when:
      event:
        - push

  - name: codedeploy api preprod
    image: golang:alpine
    commands:
      - apk add --update bash python python-dev py-pip build-base jq
      - pip install awscli
      - aws s3 cp s3://$LAMBDA_BUCKET/$PROJECT/$DEPLOY_ENVIRONMENT/CodeDeploy/deploy_jaqu_caz.sh .
      - aws s3 cp s3://$LAMBDA_BUCKET/$PROJECT/$DEPLOY_ENVIRONMENT/CodeDeploy/deploy_register_csv.sh .
      - aws s3 cp s3://$LAMBDA_BUCKET/$PROJECT/$DEPLOY_ENVIRONMENT/CodeDeploy/deploy_exception_handler.sh .
      - aws s3 cp s3://$LAMBDA_BUCKET/$PROJECT/$DEPLOY_ENVIRONMENT/CodeDeploy/deploy_audit_handler.sh .
      - bash deploy_jaqu_caz.sh
      - bash deploy_register_csv.sh
      - bash deploy_exception_handler.sh
      - bash deploy_audit_handler.sh
    environment:
      AWS_ACCESS_KEY_ID:
        from_secret: aws_access_key_id
      AWS_SECRET_ACCESS_KEY:
        from_secret: aws_secret_access_key
      AWS_DEFAULT_REGION: eu-west-2
      PROJECT: ntr
      DEPLOY_ENVIRONMENT: preprod
      LAMBDA_BUCKET: jaqu-projects-lambda-bucket
    when:
      event:
        - push

  # subscribe to operational monitoring alert in api preprod
  - name: subscribe to operational monitoring alert in api preprod
    image: alpine:latest
    commands:
      - apk add --update bash python python-dev py-pip build-base
      - pip install awscli
      - python ./ci-cd-resources/subscribe_to_alert_topics.py --include $PROJECT,$DEPLOY_ENVIRONMENT --exclude dead,letter
    environment:
      AWS_ACCESS_KEY_ID:
        from_secret: aws_access_key_id
      AWS_SECRET_ACCESS_KEY:
        from_secret: aws_secret_access_key
      AWS_DEFAULT_REGION: eu-west-2
      PROJECT: ntr
      DEPLOY_ENVIRONMENT: preprod
    when:
      event:
        - push
  ############################################## End Pre-prod Only #######################################################

---
















  ############################################## Production steps ######################################################


kind: pipeline
type: docker
name: ntr-api-prod

trigger:
  branch:
    - master
  event:
    - pull_request
    - push
concurrency:
  limit: 1

volumes:
  - name: package_directory
    temp: {}

steps:

  # Invoke terraform scripts to deploy lambda function in Production
  - name: plan terraform updates in prod
    image: hashicorp/terraform:0.12.3
    volumes:
      - name: package_directory
        path: /opt/package
    commands:
      - apk add --update bash python python-dev py-pip build-base jq wget
      - pip install awscli
      - mkdir ~/.ssh
      - echo -n "$GIT_PRIVATE_SSH" > ~/.ssh/id_rsa
      - chmod 600 ~/.ssh/id_rsa
      - touch ~/.ssh/known_hosts
      - chmod 600 ~/.ssh/known_hosts
      - ssh-keyscan -H github.com > /etc/ssh/ssh_known_hosts 2> /dev/null
      - LAMBDA_FUNCTION=ntr-csv-from-s3-lambda-preprod
      - ENV=preprod
      - SIGNED_URL=`aws lambda get-function --function-name $LAMBDA_FUNCTION --qualifier $ENV| jq --raw-output '.Code.Location'`
      - VERSION=`aws lambda get-function --function-name $LAMBDA_FUNCTION --qualifier $ENV| jq --raw-output '.Configuration.Version'`
      - wget -O /opt/package/$LAMBDA_FUNCTION-$VERSION.zip $SIGNED_URL
      - export TF_VAR_lambda_file=/opt/package/$LAMBDA_FUNCTION-$VERSION.zip
      - git clone git@github.com:InformedSolutions/JAQU-CAZ-IAC.git
      - cd JAQU-CAZ-IAC
      - git checkout master
      - export TF_VAR_lambda_file=$(ls /opt/package/*.zip | tail -1)
      - cd terraform/projects/ntr/layers/00.global
      - PATH=$PATH:../../../../bin/
      - chmod +x ../../../../bin/tf
      - tf init
      - tf workspace select default
      - tf plan
      - cd ../01.networking
      - tf init
      - tf workspace select prod || tf workspace new prod
      - tf plan
      - cd ../02.backends
      - tf init
      - tf workspace select prod || tf workspace new prod
      - tf plan
      - cd ../03.api
      - tf init
      - tf workspace select prod || tf workspace new prod
      - tf plan
    environment:
      TF_VAR_access_key:
        from_secret: aws_access_key_id
      TF_VAR_secret_key:
        from_secret: aws_secret_access_key
      TF_VAR_account_id:
        from_secret: aws_account_id
      GIT_PRIVATE_SSH:
        from_secret: github_private_key
      AWS_ACCESS_KEY_ID:
        from_secret: aws_access_key_id
      AWS_SECRET_ACCESS_KEY:
        from_secret: aws_secret_access_key
      AWS_DEFAULT_REGION: eu-west-2
    when:
      event:
        - pull_request

  - name: provisioning warning
    image: docker:git
    commands:
      - echo "Pipeline failed. If a deployment is being made for the first time into an environment terraform backends will not yet exist which means this is to be expected. If not terraform related, please see logs for further details"
    when:
      status:
        - failure

  # Invoke terraform scripts to deploy lambda function in Production
  - name: deploy to production
    image: hashicorp/terraform:0.12.3
    volumes:
      - name: package_directory
        path: /opt/package
    commands:
      - apk add --update bash python python-dev py-pip build-base jq wget
      - pip install awscli
      - mkdir ~/.ssh
      - echo -n "$GIT_PRIVATE_SSH" > ~/.ssh/id_rsa
      - chmod 600 ~/.ssh/id_rsa
      - touch ~/.ssh/known_hosts
      - chmod 600 ~/.ssh/known_hosts
      - ssh-keyscan -H github.com > /etc/ssh/ssh_known_hosts 2> /dev/null
      - LAMBDA_FUNCTION=ntr-csv-from-s3-lambda-preprod
      - ENV=preprod
      - SIGNED_URL=`aws lambda get-function --function-name $LAMBDA_FUNCTION --qualifier $ENV| jq --raw-output '.Code.Location'`
      - VERSION=`aws lambda get-function --function-name $LAMBDA_FUNCTION --qualifier $ENV| jq --raw-output '.Configuration.Version'`
      - wget -O /opt/package/$LAMBDA_FUNCTION-$VERSION.zip $SIGNED_URL
      - export TF_VAR_lambda_file=/opt/package/$LAMBDA_FUNCTION-$VERSION.zip
      - git clone git@github.com:InformedSolutions/JAQU-CAZ-IAC.git
      - cd JAQU-CAZ-IAC
      - git checkout master
      - export TF_VAR_lambda_file=$(ls /opt/package/*.zip | tail -1)
      - cd terraform/projects/ntr/layers/00.global
      - PATH=$PATH:../../../../bin/
      - chmod +x ../../../../bin/tf
      - tf init
      - tf workspace select default
      - tf apply -auto-approve
      - cd ../01.networking
      - tf init
      - tf workspace select prod || tf workspace new prod
      - tf apply -auto-approve
      - cd ../02.backends
      - tf init
      - tf workspace select prod || tf workspace new prod
      - tf apply -auto-approve
      - cd ../03.api
      - tf init
      - tf workspace select prod || tf workspace new prod
      - tf apply -auto-approve
    environment:
      TF_VAR_access_key:
        from_secret: aws_access_key_id
      TF_VAR_secret_key:
        from_secret: aws_secret_access_key
      TF_VAR_account_id:
        from_secret: aws_account_id
      GIT_PRIVATE_SSH:
        from_secret: github_private_key
      AWS_ACCESS_KEY_ID:
        from_secret: aws_access_key_id
      AWS_SECRET_ACCESS_KEY:
        from_secret: aws_secret_access_key
      AWS_DEFAULT_REGION: eu-west-2
    when:
      event:
        - push

  - name: codedeploy api production
    image: golang:alpine
    commands:
      - apk add --update bash python python-dev py-pip build-base jq
      - pip install awscli
      - aws s3 cp s3://$LAMBDA_BUCKET/$PROJECT/$DEPLOY_ENVIRONMENT/CodeDeploy/deploy_jaqu_caz.sh .
      - aws s3 cp s3://$LAMBDA_BUCKET/$PROJECT/$DEPLOY_ENVIRONMENT/CodeDeploy/deploy_register_csv.sh .
      - aws s3 cp s3://$LAMBDA_BUCKET/$PROJECT/$DEPLOY_ENVIRONMENT/CodeDeploy/deploy_exception_handler.sh .
      - aws s3 cp s3://$LAMBDA_BUCKET/$PROJECT/$DEPLOY_ENVIRONMENT/CodeDeploy/deploy_audit_handler.sh .
      - bash deploy_jaqu_caz.sh
      - bash deploy_register_csv.sh
      - bash deploy_exception_handler.sh
      - bash deploy_audit_handler.sh
    environment:
      AWS_ACCESS_KEY_ID:
        from_secret: aws_access_key_id
      AWS_SECRET_ACCESS_KEY:
        from_secret: aws_secret_access_key
      AWS_DEFAULT_REGION: eu-west-2
      PROJECT: ntr
      DEPLOY_ENVIRONMENT: prod
      LAMBDA_BUCKET: jaqu-projects-lambda-bucket
    when:
      event:
        - push

  # subscribe to operational monitoring alert in api prod
  - name: subscribe to operational monitoring alert in api prod
    image: alpine:latest
    commands:
      - apk add --update bash python python-dev py-pip build-base
      - pip install awscli
      - python ./ci-cd-resources/subscribe_to_alert_topics.py --include $PROJECT,$DEPLOY_ENVIRONMENT --exclude dead,letter
    environment:
      AWS_ACCESS_KEY_ID:
        from_secret: aws_access_key_id
      AWS_SECRET_ACCESS_KEY:
        from_secret: aws_secret_access_key
      AWS_DEFAULT_REGION: eu-west-2
      PROJECT: ntr
      DEPLOY_ENVIRONMENT: prod
    when:
      event:
        - push
  ############################################# End Production Only #######################################################










  ################################################ Secrets #########################################################

# Note the below values are pulled from AWS Secrets Manager via the aws-secrets Drone plugin
---
kind: secret
name: aws_access_key_id
get:
  path: /secret/drone.global
  name: awsAccessKeyId

---
kind: secret
name: aws_secret_access_key
get:
  path: /secret/drone.global
  name: awsSecretAccessKey

---
kind: secret
name: sonar_host
get:
  path: /secret/drone.global
  name: sonarHost

---
kind: secret
name: sonar_token
get:
  path: /secret/drone.global
  name: sonarToken

---
kind: secret
name: github_private_key
get:
  path: /secret/drone.global
  name: githubPrivateKey

---
kind: secret
name: nexus_url
get:
  path: /secret/drone.global
  name: nexusUrl

---
kind: secret
name: nexus_username
get:
  path: /secret/drone.global
  name: nexusUsername

---
kind: secret
name: nexus_password
get:
  path: /secret/drone.global
  name: nexusPassword

---
kind: secret
name: cognito_sub_id_e_to_e
get:
  path: /secret/drone.global
  name: cognitoSubIdEToE

---
kind: secret
name: aws_id_e_to_e
get:
  path: /secret/drone.global
  name: awsIdEToE

---
kind: secret
name: aws_secret_e_to_e
get:
  path: /secret/drone.global
  name: awsSecretEToE

  ################################################ End Secrets #########################################################